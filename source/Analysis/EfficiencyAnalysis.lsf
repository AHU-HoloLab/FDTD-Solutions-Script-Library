######################################################################
# 添加必要说明
######################################################################

# 清空工作区域
deleteall;
clear;

# 长度
m  = 1e-0;
cm = 1e-2;
mm = 1e-3;
um = 1e-6;
nm = 1e-9;
pm = 1e-12;
fm = 1e-15;

# 时间
s  = 1;
ms = 1e-3;
us = 1e-6;
ns = 1e-9;
ps = 1e-12;
fs = 1e-15;

# 波长
lambda_red   = 655*nm;
lambda_green = 532*nm;
lambda_blue  = 473*nm;

# 系统自带材料
Si = "Si (Silicon) - Palik";
SiO2 = "SiO2 (Glass) - Palik";
Si3N4 = "Si3N4 (Silicon Nitride) - Phillip";
Au = "Au (Gold) - Palik";
Ag = "Ag (Silver) - Palik (0-2um)";

# 以下材料若要使用需要先导入
TiO2 = "TiO2 (Nanoparticles) - (405-635nm)";
MgF2 = "MgF2 - (30-2000nm)";
PDMS = "PDMS(Fluid) - (820-2500nm)";


# 参数
#Unit = 155*nm;
#Ant_W = 60*nm;
#Ant_L = 125*nm;
#Ant_H = 600*nm;
#Sub_thick = 1000*nm;
#Lambda = 405*nm;
#mesh_override = 30*nm;
#N = 10;
#N_x = round(N/2);
#N_y = round(N/2);
#R = N*Unit/2;
#NA = 0.2;
#Zg = (N*Unit)/(2*tan(asin(NA)));

# 添加结构组
#addstructuregroup;
#set("name","TiO2_Group");
#set("use relative coordinates", false);
#set("x", 0);   
#set("y", 0);
#set("z", 0);

# 绘制结构阵列
#for (i = -N_x : N_x)
#{ 
#    for(j = -N_y : N_y)
#    {
#        x = i * Unit;
#        y = j * Unit;
#        Circle=(x^2+y^2<R^2);
#        if(Circle){
#        r = sqrt(x^2+y^2);
#        phi = 2*pi - 2*pi*(1/Lambda)*r*NA;
#        Theta=round(mod(phi, 2*pi)/(2*pi)*360/2);
#
#        addrect;
#        name="TiO2 ("+num2str(i)+", "+num2str(j)+")";
#        set("name", name);
#        set("x", x);   
#        set("y", y);
#        set("z", 0);
#        set("x span", Ant_L);
#        set("y span", Ant_W);
#        set("z span", Ant_H);
#        set("first axis", "z");
#        set("rotation 1", Theta);
#        set("material", "TiO2 (Nanoparticles) - (405-635nm)");
#        addtogroup("TiO2_Group");
#        }
#    }
#}

#添加基底
#addcircle;
#set("name", "Substrate");
#set("z", 0);
#set("y", 0);
#set("radius",Unit*(N/2+0.5));
#xmax = getnamed("TiO2_Group::TiO2 (0, 0)", "x min");
#xmin = xmax - Sub_thick;
#set("x min", xmin);
#set("x max", xmax);
#set("material", "SiO2 (Glass) - Palik");

# 添加光源
#addtfsf;
#set("name", "source_X");
#set("injection axis","z");
#set("direction", "Forward");
#set("x", 0);
#set("x span",Unit*(N_x+1)*3);
#set("y", 0);
#set("y span",Unit*(N_y+1)*3);
#zmax = getnamed("TiO2_Group::TiO2 (0, 0)", "z max") + (1/4)*Lambda;
#zmin = getnamed("TiO2_Group::TiO2 (0, 0)", "z min") - (1/4)*Lambda;
#set("z max", zmax);
#set("z min", zmin);
#set("wavelength start", Lambda);
#set("wavelength stop", Lambda);
#set("amplitude", sqrt(2)/2);
#set("polarization angle", 0);
#set("phase", 0);

#addtfsf;
#set("name", "source_Y");
#set("injection axis","z");
#set("direction", "Forward");
#set("x", 0);
#set("x span",Unit*(N_x+1)*3);
#set("y", 0);
#set("y span",Unit*(N_y+1)*3);
#zmax = getnamed("TiO2_Group::TiO2 (0, 0)", "z max") + (1/4)*Lambda;
#zmin = getnamed("TiO2_Group::TiO2 (0, 0)", "z min") - (1/4)*Lambda;
#set("z max", zmax);
#set("z min", zmin);
#set("wavelength start", Lambda);
#set("wavelength stop", Lambda);
#set("amplitude", sqrt(2)/2);
#set("polarization angle", 90);
#set("phase", 90);

# 添加监视器
#addpower;
#set("name","field_profile_monitor");
# 1 = point, 2 = linear x, 3 = linear y, 4 = linear z,
# 5 = 2D x-normal, 6 = 2D y-normal, 7 = 2D z-normal, 8 = 3D
#set("monitor type",7);
#set("x", 0);
#set("x span",Unit*(N_x+1)*3);
#set("y", 0);
#set("y span",Unit*(N_y+1)*3);
#zm = getnamed("TiO2_Group::TiO2 (0, 0)", "z max") + Zg/2;
#set("z", zm);

#addpower;
#set("name","field_profile_monitor_CS");
# 1 = point, 2 = linear x, 3 = linear y, 4 = linear z,
# 5 = 2D x-normal, 6 = 2D y-normal, 7 = 2D z-normal, 8 = 3D
#set("monitor type",6);
#zmin = 0;
#zmax = getnamed("TiO2_Group::TiO2 (0, 0)", "z max") + Zg;
#set("z min", zmin);
#set("z max", zmax);
#set("x", 0);
#set("x span",Unit*(N*2));
#set("y", 0);


# 添加FDTD区域
#addfdtd;
#set("dimension",2);  #  1 = 2D, 2 = 3D
#set("x", 0);
#set("x span",Unit*N+Lambda);
#set("y", 0);
#set("y span",Unit*N+Lambda);
#zmax = getnamed("TiO2_Group::TiO2 (0, 0)", "z max") +Zg+ (1/4)*Lambda;
#zmin = getnamed("source_X", "z min") - (1/4)*Lambda;
#set("z min", zmin);
#set("z max", zmax);
#set("auto shutoff min", 1e-5);
#set("pml layers", 24);
#set("simulation time", 2000*fs);

# 输出完成信息
?"[BUILD COMPLETE]";

# 运行仿真
#run;
